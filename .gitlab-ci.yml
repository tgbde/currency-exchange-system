stages:
  - test
  - build
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  NODE_VERSION: "18"
  PYTHON_VERSION: "3.13"

# 测试阶段
test-backend:
  stage: test
  image: python:$PYTHON_VERSION
  before_script:
    - cd backend
    - python -m pip install --upgrade pip
    - pip install -r requirements.txt
  script:
    - python -m pytest tests/ -v --cov=app --cov-report=xml
  coverage: '/TOTAL.+ ([0-9]{1,3}%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: backend/coverage.xml

test-frontend:
  stage: test
  image: node:$NODE_VERSION
  before_script:
    - cd frontend
    - npm ci
  script:
    - npm test -- --coverage --watchAll=false
    - npm run build
  artifacts:
    paths:
      - frontend/build/
    expire_in: 1 hour

# 构建阶段
build-backend:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd backend
    - docker build -t $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA .
    - docker build -t $CI_REGISTRY_IMAGE/backend:latest .
    - docker push $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/backend:latest
  only:
    - main
    - develop

build-frontend:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd frontend
    - docker build -t $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA .
    - docker build -t $CI_REGISTRY_IMAGE/frontend:latest .
    - docker push $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/frontend:latest
  only:
    - main
    - develop

# 部署到开发环境
deploy-dev:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl bash
    - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    - chmod +x kubectl
    - mv kubectl /usr/local/bin/
  script:
    - echo "部署到开发环境"
    - kubectl set image deployment/currency-backend currency-backend=$CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA -n currency-exchange-dev
    - kubectl set image deployment/currency-frontend currency-frontend=$CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA -n currency-exchange-dev
    - kubectl rollout status deployment/currency-backend -n currency-exchange-dev
    - kubectl rollout status deployment/currency-frontend -n currency-exchange-dev
  environment:
    name: development
    url: https://dev.currency-exchange.com
  only:
    - develop

# 部署到生产环境
deploy-prod-aws:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl bash aws-cli
  script:
    - chmod +x ./deploy/aws/deploy.sh
    - ./deploy/aws/deploy.sh production $AWS_REGION
  environment:
    name: production-aws
    url: https://aws.currency-exchange.com
  when: manual
  only:
    - main

deploy-prod-aliyun:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl bash
    - wget https://aliyuncli.alicdn.com/aliyun-cli-linux-latest-amd64.tgz
    - tar -xzf aliyun-cli-linux-latest-amd64.tgz
    - mv aliyun /usr/local/bin/
    - aliyun configure set --profile default --mode AK --region $ALIYUN_REGION --access-key-id $ALIYUN_ACCESS_KEY_ID --access-key-secret $ALIYUN_ACCESS_KEY_SECRET
  script:
    - chmod +x ./deploy/aliyun/deploy.sh
    - ./deploy/aliyun/deploy.sh production $ALIYUN_REGION
  environment:
    name: production-aliyun
    url: https://aliyun.currency-exchange.com
  when: manual
  only:
    - main

# 通知
notify-success:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - |
      curl -X POST -H 'Content-type: application/json' \
        --data '{"text":"✅ 汇率系统部署成功！\n分支: '$CI_COMMIT_REF_NAME'\n提交: '$CI_COMMIT_SHA'\n流水线: '$CI_PIPELINE_URL'"}' \
        $SLACK_WEBHOOK_URL
  when: on_success
  only:
    - main

notify-failure:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - |
      curl -X POST -H 'Content-type: application/json' \
        --data '{"text":"❌ 汇率系统部署失败！\n分支: '$CI_COMMIT_REF_NAME'\n提交: '$CI_COMMIT_SHA'\n流水线: '$CI_PIPELINE_URL'"}' \
        $SLACK_WEBHOOK_URL
  when: on_failure
  only:
    - main